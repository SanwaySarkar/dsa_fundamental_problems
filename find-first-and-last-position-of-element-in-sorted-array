class Solution {
    public int[] searchRange(int[] nums, int target) {
        int result[] = new int[2];
        result[0] =-1;
        result[1] = -1;
		int start =0;
        if(nums.length<1){
            return result;
        }
        if(target>nums[nums.length-1]){
            return result;
        }
		int end = nums.length;
		int mid = (start+end)/2;
		
		
		while(start<=end) {
			if(nums[mid]==target) {
				//System.out.println("data found ");
				
				if(mid==0 && nums.length==1) {
					result[0]=mid;
					result[1]= mid;
				}
                if(mid==0 && nums.length>1) {
					result[0]=mid;
					 int i = mid;
					 while(i <=nums.length-1 && nums[i]==target ) {
						 result[1]= i;
						 i = i+1;
					 }
				}
				  if(mid > nums.length-1 && nums[mid-1]==target) {
					if(result[0]==-1) {
					result[0]= mid-1;
					}
					result[1] = mid;
				}
				
				 if(mid>0 && mid-1<=nums.length-1 && nums[mid-1]==target) {
					 int i = mid;
                     if(result[0]==-1) {
							result[0]= mid;
							}
					 while(i>=0 && nums[i]==target ) {
						 result[0]= i;
						 i = i-1;
					 }
					 result[1] = mid;
					
				}

				 if(mid>0 && mid+1<=nums.length-1 && nums[mid+1]==target) {
                     if(result[0]==-1) {
							result[0]= mid;
							}
					 
					 int i = mid;
					 while(i <=nums.length-1 && nums[i]==target ) {
						 result[1]= i;
						 i = i+1;
					 }
				}
                else{
                	if(result[0]==-1) {
    					result[0]= mid;
    					result[1] = mid;
                	}
					
                }
				break;
			}
			if(nums[mid]<target) {
				start = mid+1;
				mid = (start+end)/2;
			}
			if(nums[mid]>target) {
				end = mid-1;
				mid = (start+end)/2;
			}
		}
		return result;

    }
}
